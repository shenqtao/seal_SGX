  Creating proxy/bridge routines
  bigpoly.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util/common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
..\SEAL\bigpoly.cpp(471): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
  bigpolyarith.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  bigpolyarray.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\../SEAL/util/common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  biguint.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\../SEAL/util/common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
..\SEAL\biguint.cpp(249): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
  chooser.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
..\SEAL\chooser.cpp(417): warning C4244: 'argument': conversion from 'uint64_t' to 'double', possible loss of data
..\SEAL\chooser.cpp(419): warning C4244: 'initializing': conversion from 'uint64_t' to 'int', possible loss of data
..\SEAL\chooser.cpp(430): warning C4244: 'argument': conversion from 'uint64_t' to 'int', possible loss of data
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\map(654): warning C4521: 'std::__value_type<int,seal::BigUInt>': multiple copy constructors specified
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\__tree(595): note: see reference to class template instantiation 'std::__value_type<int,seal::BigUInt>' being compiled
  ..\SEAL\chooser.cpp(546): note: see reference to class template instantiation 'std::__tree_node<std::__value_type<int,seal::BigUInt>,void *>' being compiled
  decryptor.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  encoder.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\../SEAL/util/common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
..\SEAL\encoder.cpp(468): warning C4244: 'initializing': conversion from 'double' to 'int', possible loss of data
..\SEAL\encoder.cpp(509): warning C4244: 'initializing': conversion from 'double' to 'int', possible loss of data
..\SEAL\encoder.cpp(563): warning C4244: 'initializing': conversion from 'double' to 'int', possible loss of data
  encryptionparams.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  encryptor.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\algorithm(2873): warning C4307: '+': integral constant overflow
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\algorithm(3044): note: see reference to class template instantiation 'std::__independent_bits_engine<_URNG,_UIntType>' being compiled
          with
          [
              _URNG=seal::util::RandomToStandardAdapter
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\algorithm(3010): note: see reference to function template instantiation 'int std::uniform_int_distribution<int>::operator ()<_URNG>(_URNG &,const std::uniform_int_distribution<int>::param_type &)' being compiled
          with
          [
              _URNG=seal::util::RandomToStandardAdapter
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\algorithm(3010): note: see reference to function template instantiation 'int std::uniform_int_distribution<int>::operator ()<_URNG>(_URNG &,const std::uniform_int_distribution<int>::param_type &)' being compiled
          with
          [
              _URNG=seal::util::RandomToStandardAdapter
          ]
  ..\SEAL\encryptor.cpp(172): note: see reference to function template instantiation 'int std::uniform_int_distribution<int>::operator ()<seal::util::RandomToStandardAdapter>(_URNG &)' being compiled
          with
          [
              _URNG=seal::util::RandomToStandardAdapter
          ]
  ..\SEAL\encryptor.cpp(172): note: see reference to function template instantiation 'int std::uniform_int_distribution<int>::operator ()<seal::util::RandomToStandardAdapter>(_URNG &)' being compiled
          with
          [
              _URNG=seal::util::RandomToStandardAdapter
          ]
  evaluationkeys.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\../SEAL/util/common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
  evaluator.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  keygenerator.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
..\SEAL\keygenerator.cpp(149): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
..\SEAL\keygenerator.cpp(150): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
..\SEAL\keygenerator.cpp(467): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\algorithm(2873): warning C4307: '+': integral constant overflow
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\algorithm(3044): note: see reference to class template instantiation 'std::__independent_bits_engine<_URNG,_UIntType>' being compiled
          with
          [
              _URNG=seal::util::RandomToStandardAdapter
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\algorithm(3010): note: see reference to function template instantiation 'int std::uniform_int_distribution<int>::operator ()<_URNG>(_URNG &,const std::uniform_int_distribution<int>::param_type &)' being compiled
          with
          [
              _URNG=seal::util::RandomToStandardAdapter
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\algorithm(3010): note: see reference to function template instantiation 'int std::uniform_int_distribution<int>::operator ()<_URNG>(_URNG &,const std::uniform_int_distribution<int>::param_type &)' being compiled
          with
          [
              _URNG=seal::util::RandomToStandardAdapter
          ]
  ..\SEAL\keygenerator.cpp(257): note: see reference to function template instantiation 'int std::uniform_int_distribution<int>::operator ()<seal::util::RandomToStandardAdapter>(_URNG &)' being compiled
          with
          [
              _URNG=seal::util::RandomToStandardAdapter
          ]
  ..\SEAL\keygenerator.cpp(257): note: see reference to function template instantiation 'int std::uniform_int_distribution<int>::operator ()<seal::util::RandomToStandardAdapter>(_URNG &)' being compiled
          with
          [
              _URNG=seal::util::RandomToStandardAdapter
          ]
  polycrt.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  randomgen.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  simulator.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  utilities.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  clipnormal.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  common.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\../util/common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  computation.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  crt.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
..\SEAL\util\crt.cpp(50): warning C4267: '=': conversion from 'size_t' to 'int', possible loss of data
  Generating Code...
  Compiling...
  locks.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\../util/locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\../util/locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  mempool.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
..\SEAL\util\mempool.cpp(79): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
..\SEAL\util\mempool.cpp(103): warning C4267: '=': conversion from 'size_t' to 'int', possible loss of data
..\SEAL\util\mempool.cpp(141): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
..\SEAL\util\mempool.cpp(152): warning C4267: 'initializing': conversion from 'size_t' to 'int', possible loss of data
  modulus.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  ntt.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  polyarith.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  polyarithmod.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  polycore.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  polyextras.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  polyfftmult.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  polyfftmultmod.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  polymodulus.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  uintarith.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  uintarithmod.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  uintcore.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\../util/common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  uintextras.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
  SealEnclaveTest.cpp
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1915): warning C4522: 'std::atomic_flag': multiple assignment operators specified
  ADD_CARRY_UINT64 not defined. Using add_uint64_uint64_generic (see util/defines.h)
  SUB_BORROW_UINT64 not defined. Using sub_uint64_uint64_generic (see util/defines.h).
  MULTIPLY_UINT64 not defined. Using multiply_uint64_uint64_generic (see util/defines.h).
  MSB_INDEX_UINT64 not defined. Using get_msb_index_generic (see util/defines.h).
c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\../SEAL/util/common.h(8): warning C4005: '_LITTLE_ENDIAN': macro redefinition
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\tlibc\sys/endian.h(39): note: see previous definition of '_LITTLE_ENDIAN'
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1091): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=int
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,true>' being compiled
          with
          [
              _Tp=int
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(122): note: see reference to class template instantiation 'std::atomic<int>' being compiled
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1084): warning C4522: 'std::__atomic_base<_Tp,false>': multiple assignment operators specified
          with
          [
              _Tp=bool
          ]
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\atomic(1212): note: see reference to class template instantiation 'std::__atomic_base<_Tp,false>' being compiled
          with
          [
              _Tp=bool
          ]
  c:\users\user\desktop\version_07_31_2017_happy\sealenclavetest\seal\util\locks.h(124): note: see reference to class template instantiation 'std::atomic<bool>' being compiled
SealEnclaveTest.cpp(143): warning C4334: '<<': result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
SealEnclaveTest.cpp(194): warning C4267: '+=': conversion from 'size_t' to 'int', possible loss of data
C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\map(654): warning C4521: 'std::__value_type<int,seal::BigUInt>': multiple copy constructors specified
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\__tree(595): note: see reference to class template instantiation 'std::__value_type<int,seal::BigUInt>' being compiled
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\map(1588): note: see reference to class template instantiation 'std::__tree_node<std::__value_type<int,seal::BigUInt>,void *>' being compiled
  C:\Program Files (x86)\Intel\IntelSGXSDK\include\libc++\map(1581): note: while compiling class template member function 'const seal::BigUInt &std::map<int,seal::BigUInt,std::less<_Key>,std::allocator<std::pair<const _Key,_Tp>>>::at(const int &) const'
          with
          [
              _Key=int,
              _Tp=seal::BigUInt
          ]
  SealEnclaveTest.cpp(142): note: see reference to function template instantiation 'const seal::BigUInt &std::map<int,seal::BigUInt,std::less<_Key>,std::allocator<std::pair<const _Key,_Tp>>>::at(const int &) const' being compiled
          with
          [
              _Key=int,
              _Tp=seal::BigUInt
          ]
  SealEnclaveTest.cpp(142): note: see reference to class template instantiation 'std::map<int,seal::BigUInt,std::less<_Key>,std::allocator<std::pair<const _Key,_Tp>>>' being compiled
          with
          [
              _Key=int,
              _Tp=seal::BigUInt
          ]
  Generating Code...
  SealEnclaveTest_t.c
     Creating library C:\Users\user\Desktop\version_07_31_2017_Happy\SealEnclaveTest\x64\Prerelease\SealEnclaveTest.lib and object C:\Users\user\Desktop\version_07_31_2017_Happy\SealEnclaveTest\x64\Prerelease\SealEnclaveTest.exp
  SealEnclaveTest.vcxproj -> C:\Users\user\Desktop\version_07_31_2017_Happy\SealEnclaveTest\x64\Prerelease\SealEnclaveTest.dll
  SealEnclaveTest.vcxproj -> C:\Users\user\Desktop\version_07_31_2017_Happy\SealEnclaveTest\x64\Prerelease\SealEnclaveTest.pdb (Full PDB)
  The required memory is 0x5498000.
  Succeed.
  <EnclaveConfiguration>
      <ProdID>0</ProdID>
      <ISVSVN>0</ISVSVN>
      <StackMaxSize>0x800000</StackMaxSize>
      <HeapMaxSize>0x4C00000</HeapMaxSize>
      <TCSNum>1</TCSNum>
      <TCSPolicy>1</TCSPolicy>
      <DisableDebug>0</DisableDebug>
      <MiscSelect>0</MiscSelect>
      <MiscMask>0xFFFFFFFF</MiscMask>
  </EnclaveConfiguration>
